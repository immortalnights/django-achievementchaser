# Generated by Django 4.2.2 on 2023-10-19 21:21

from django.db import migrations
from loguru import logger


def set_player_game_completed_properly(apps, schema_editor):
    Player = apps.get_model("players", "Player")
    PlayerOwnedGame = apps.get_model("players", "PlayerOwnedGame")
    PlayerAchievements = apps.get_model("players", "PlayerUnlockedAchievement")
    Achievements = apps.get_model("achievements", "Achievement")

    for player in Player.objects.all():
        logger.info(f"Processing player {player.name} ({player.id}) owned games")

        for owned_game in PlayerOwnedGame.objects.filter(player=player):
            available_achievements = Achievements.objects.filter(game_id=owned_game.game_id)
            unlocked_achievements = PlayerAchievements.objects.filter(
                player=player, game_id=owned_game.game_id
            ).order_by("-datetime")

            if (
                available_achievements.count() > 0
                and unlocked_achievements.count() > 0
                and available_achievements.count() == unlocked_achievements.count()
            ):
                completed_datetime = unlocked_achievements[0].datetime
                logger.info(f"Player completed '{owned_game.game.name}' at {completed_datetime}")

                owned_game.completed = completed_datetime
                owned_game.save()


def set_game_last_playtime(apps, schema_editor):
    Player = apps.get_model("players", "Player")
    PlayerOwnedGame = apps.get_model("players", "PlayerOwnedGame")
    PlayerGamePlaytime = apps.get_model("players", "PlayerGamePlaytime")

    for player in Player.objects.all():
        logger.info(f"Processing player {player.name} ({player.id}) playtime")

        for owned_game in PlayerOwnedGame.objects.filter(player=player):
            try:
                last_playtime = PlayerGamePlaytime.objects.filter(player=player, game_id=owned_game.game_id).latest(
                    "datetime"
                )

                # Only update the last playtime if it's None
                if owned_game.last_played is None:
                    logger.info(f"Setting last playtime for '{owned_game.game.name}'")
                    owned_game.last_played = last_playtime.datetime
                    owned_game.save()

            except PlayerGamePlaytime.DoesNotExist:
                # Player has not played this game
                pass


class Migration(migrations.Migration):
    dependencies = [
        ("players", "0015_player_api_key"),
    ]

    operations = [
        migrations.RunPython(set_player_game_completed_properly, migrations.RunPython.noop),
        migrations.RunPython(set_game_last_playtime, migrations.RunPython.noop),
    ]
