# Generated by Django 4.2.2 on 2023-10-30 21:32

from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion


# players.migrations.0011_auto_20230914_2216
def set_game_difficulty_percentage(apps, schema_editor):
    Game = apps.get_model("games", "Game")
    for game in Game.objects.all():
        if game.difficulty_percentage is None:
            game.difficulty_percentage = 0
            game.save()

    logger.info("Processed all games")


def set_player_game_completion_date(apps, schema_editor):
    PlayerOwnedGame = apps.get_model("players", "PlayerOwnedGame")
    PlayerAchievements = apps.get_model("players", "PlayerUnlockedAchievement")
    Achievements = apps.get_model("achievements", "Achievement")
    for owned_game in PlayerOwnedGame.objects.all():
        logger.info(f"Processing player owned game {owned_game.game_id} for {owned_game.player_id}")
        available_achievements = Achievements.objects.filter(game_id=owned_game.game_id)
        unlocked_achievements = PlayerAchievements.objects.filter(game_id=owned_game.game_id).order_by("-datetime")

        logger.info(
            f"Game has {available_achievements.count()} achievements, player has unlocked {unlocked_achievements.count()}"
        )
        if (
            available_achievements.count() > 0
            and unlocked_achievements.count() > 0
            and available_achievements.count() == unlocked_achievements.count()
        ):
            logger.info(f"Player has unlocked all achievements")
            owned_game.completion_datetime = unlocked_achievements[0].datetime
        else:
            owned_game.completion_datetime = None
            owned_game.save()

    logger.info("Processed all owned games")


# players.migrations.0016_auto_20231019_2221
def set_player_game_completed_properly(apps, schema_editor):
    Player = apps.get_model("players", "Player")
    PlayerOwnedGame = apps.get_model("players", "PlayerOwnedGame")
    PlayerAchievements = apps.get_model("players", "PlayerUnlockedAchievement")
    Achievements = apps.get_model("achievements", "Achievement")

    for player in Player.objects.all():
        logger.info(f"Processing player {player.name} ({player.id}) owned games")

        for owned_game in PlayerOwnedGame.objects.filter(player=player):
            available_achievements = Achievements.objects.filter(game_id=owned_game.game_id)
            unlocked_achievements = PlayerAchievements.objects.filter(
                player=player, game_id=owned_game.game_id
            ).order_by("-datetime")

            if (
                available_achievements.count() > 0
                and unlocked_achievements.count() > 0
                and available_achievements.count() == unlocked_achievements.count()
            ):
                completed_datetime = unlocked_achievements[0].datetime
                logger.info(f"Player completed '{owned_game.game.name}' at {completed_datetime}")

                owned_game.completed = completed_datetime
                owned_game.save()


def set_game_last_playtime(apps, schema_editor):
    Player = apps.get_model("players", "Player")
    PlayerOwnedGame = apps.get_model("players", "PlayerOwnedGame")
    PlayerGamePlaytime = apps.get_model("players", "PlayerGamePlaytime")

    for player in Player.objects.all():
        logger.info(f"Processing player {player.name} ({player.id}) playtime")

        for owned_game in PlayerOwnedGame.objects.filter(player=player):
            try:
                last_playtime = PlayerGamePlaytime.objects.filter(player=player, game_id=owned_game.game_id).latest(
                    "datetime"
                )

                # Only update the last playtime if it's None
                if owned_game.last_played is None:
                    logger.info(f"Setting last playtime for '{owned_game.game.name}'")
                    owned_game.last_played = last_playtime.datetime
                    owned_game.save()

            except PlayerGamePlaytime.DoesNotExist:
                # Player has not played this game
                pass


# players.migrations.0017_auto_20231025_2054
def fix_last_played_time(apps, schema_editor):
    PlayerOwnedGame = apps.get_model("players", "PlayerOwnedGame")

    owned_games = PlayerOwnedGame.objects.filter(last_played="1970-01-01T00:00:00.000Z")
    logger.info(f"Found {owned_games.count()} owned games with invalid playtime")

    saved = 0
    for owned_game in owned_games:
        try:
            owned_game.last_played = None
            owned_game.save()
            saved += 1
        except Exception as e:
            logger.error(f"Failed to set last_played for game {owned_game.game_id} owned by {owned_game.player_id}")

    logger.info(f"Updated last_played for {saved} games")


class Migration(migrations.Migration):
    replaces = [
        ("players", "0001_initial"),
        ("players", "0002_player_games_player_played_games_and_more"),
        ("players", "0003_alter_playergameplaytime_unique_together"),
        ("players", "0004_playerownedgame_completion_percentage_and_more"),
        ("players", "0005_remove_playerownedgame_difficulty_percentage"),
        ("players", "0006_alter_playerownedgame_completion_percentage"),
        (
            "players",
            "0007_rename_achievements_resynchronization_required_playerownedgame_resynchronization_required_and_more",
        ),
        ("players", "0008_remove_player_friends_remove_player_games_and_more"),
        ("players", "0009_playerownedgame_last_played"),
        ("players", "0010_playerownedgame_completion_datetime"),
        ("players", "0011_auto_20230914_2216"),
        ("players", "0012_rename_completion_datetime_playerownedgame_completed"),
        ("players", "0013_auto_20230925_2246"),
        ("players", "0014_auto_20231018_2318"),
        ("players", "0015_player_api_key"),
        ("players", "0016_auto_20231019_2221"),
        ("players", "0017_auto_20231025_2054"),
        ("players", "0018_alter_playerunlockedachievement_achievement"),
    ]

    initial = True

    dependencies = [
        ("games", "0001_initial"),
        ("games", "0005_auto_20231030_2024"),
    ]

    operations = [
        migrations.CreateModel(
            name="Player",
            fields=[
                ("id", models.PositiveBigIntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                ("profile_url", models.CharField(default="", max_length=255)),
                ("avatar_small_url", models.CharField(default="", max_length=255)),
                ("avatar_medium_url", models.CharField(default="", max_length=255)),
                ("avatar_large_url", models.CharField(default="", max_length=255)),
                ("created", models.IntegerField(default=0)),
                ("added", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("resynchronized", models.DateTimeField(null=True)),
                ("resynchronization_required", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="PlayerGamePlaytime",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("playtime", models.PositiveIntegerField()),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                ("game", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="games.game")),
                ("player", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="players.player")),
            ],
            options={
                "unique_together": set(),
            },
        ),
        migrations.CreateModel(
            name="PlayerUnlockedAchievement",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("datetime", models.DateTimeField()),
                ("achievement", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="games.achievement")),
                ("game", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="games.game")),
                ("player", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="players.player")),
            ],
            options={
                "unique_together": {("player", "game", "achievement")},
            },
        ),
        migrations.CreateModel(
            name="PlayerOwnedGame",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("playtime_forever", models.PositiveIntegerField()),
                ("added", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("resynchronized", models.DateTimeField(null=True)),
                ("resynchronization_required", models.BooleanField(default=True)),
                ("game", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="games.game")),
                ("player", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="players.player")),
                ("completion_percentage", models.FloatField(default=0)),
                ("last_played", models.DateTimeField(null=True)),
                ("completion_datetime", models.DateTimeField(null=True)),
            ],
            options={
                "unique_together": {("game", "player")},
            },
        ),
        migrations.CreateModel(
            name="Friend",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "friend",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="friend_to_player",
                        to="players.player",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player_to_friend",
                        to="players.player",
                    ),
                ),
            ],
            options={
                "unique_together": {("player", "friend")},
            },
        ),
        migrations.RunPython(
            code=set_game_difficulty_percentage,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=set_player_game_completion_date,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RenameField(
            model_name="playerownedgame",
            old_name="completion_datetime",
            new_name="completed",
        ),
        migrations.AddField(
            model_name="player",
            name="api_key",
            field=models.CharField(default="", max_length=32),
        ),
        migrations.RunPython(
            code=set_player_game_completed_properly,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=set_game_last_playtime,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=fix_last_played_time,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="playerunlockedachievement",
            name="achievement",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="games.achievement"),
        ),
    ]
